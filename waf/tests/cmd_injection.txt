# List files, then read system password file (classic sensitive file read)
curl -sk "https://localhost/?cmd=ls|cat%20/etc/passwd"
#    ^ ls             ^ pipe into cat /etc/passwd

# Just a semicolon + id command (no real command before it) — borderline, might be benign
curl -sk "https://localhost/?cmd=;id"
#    ^ empty command ; run 'id' — many APIs could use ';' legitimately, so PL1 may skip

# Read /etc/passwd, then run id (user identity)
curl -skI "https://localhost/?cmd=cat+/etc/passwd;id"
#        cat /etc/passwd ; id

# Run id (user identity) && uname -a (kernel/system info)
curl -skI "https://localhost/?cmd=id&&uname+-a"
#        id && uname -a — double ampersand executes second only if first succeeds

# List files, then pipe into id (silly but shows pipe usage)
curl -skI "https://localhost/?cmd=ls|id"
#        ls | id

# Run id using backtick command substitution
curl -skI "https://localhost/?cmd=\`id\`"
#        `id` — shell executes inside backticks and substitutes output

# Run id using $(...) command substitution
curl -skI "https://localhost/?cmd=\$(id)"
#        $(id) — same as backticks, more modern syntax

# Launch bash, tell it to run id
curl -skI "https://localhost/?cmd=bash+-c+id"
#        bash -c id — direct shell call

# Launch sh (POSIX shell), tell it to run id
curl -skI "https://localhost/?cmd=/bin/sh+-c+id"
#        /bin/sh -c id — direct shell call
